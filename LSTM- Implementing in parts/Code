#IMPORTING REQUIRED LIBRARIES
import os
from mido import MidiFile

#CREATING DATASETS
def create_data():
    dataset="/content/drive/My Drive/Minor project 5th sem/albeniz/"
    
    x_train=[]
    y_train=[]
    
    midFiles= [f for f in os.listdir(dataset) if f.endswith('.mid')]   
       
    for file in midFiles:
        pianoLeft=[]
        pianoRight=[]
        piano=[]
        mid=MidiFile(dataset+file)
        right=mid.tracks[1]
        left=mid.tracks[2]
        
        for msg in right:
            if str(msg).split(' ')[0]=='note_on' or str(msg).split(' ')[0]=='note_off':
                temp=[]
                for m in str(msg).split(' '):
                    if m=='note_on':
                        temp.append(1)
                    elif m=='note_off':
                        temp.append(0)
                    else:
                        temp.append(int(m.split('=')[1]))
                pianoRight.append(temp)
                
        for msg in left:
            if str(msg).split(' ')[0]=='note_on' or str(msg).split(' ')[0]=='note_off':
                temp=[]
                for m in str(msg).split(' '):
                    if m=='note_on':
                        temp.append(1)
                    elif m=='note_off':
                        temp.append(0)
                    else:
                        temp.append(int(m.split('=')[1]))
                pianoLeft.append(temp)
        
        piano=pianoLeft+pianoRight
        
        i=0
        while i<500:
            y_train.append(piano[i+1])
            cur_train=[]
            for k in range(0,16):
                cur_train.append(piano[i+k])
            x_train.append(cur_train)    
            i+=1
    return (x_train,y_train)
    
    #DEFINING REQUIRED FUNCTIONS
    def c_d_e_x_train():
    c_element = []
    c_x_train=[]
    for i in range(0, 7000):
        for j in range(0, 16):
            c_element.append(x_train[i][j][2]/100)
        c_x_train.append(c_element)
        c_element=[]

    d_element = []
    d_x_train=[]
    for i in range(0, 7000):
        for j in range(0, 16):
            d_element.append(x_train[i][j][3]/128)
        d_x_train.append(d_element)
        d_element=[]
        
    e_element = []
    e_x_train=[]
    for i in range(0, 7000):
        for j in range(0, 16):
            e_element.append(x_train[i][j][4]/1000)
        e_x_train.append(e_element)
        e_element=[]
    return c_x_train, d_x_train, e_x_train

    def c_d_e_y_train():
    c_y_train=[]
    for i in range(0, 7000):
        c_y_train.append(y_train[i][2]/100)
        
    d_y_train=[]
    for i in range(0, 7000):
        d_y_train.append(y_train[i][3]/128)
        
    e_y_train=[]
    for i in range(0, 7000):
        e_y_train.append(y_train[i][4]/1000)
    return c_y_train, d_y_train, e_y_train

#LSTM MODEL
import tensorflow as tf
from tensorflow import keras

import numpy as np
import random
from mido import Message, MidiFile, MidiTrack
from sklearn import preprocessing
(x_train,y_train)=create_data()

x_train=np.array(x_train)
y_train=np.array(y_train)


c_x_train, d_x_train, e_x_train = c_d_e_x_train()
c_y_train, d_y_train, e_y_train = c_d_e_y_train()

c_x_train=np.array(c_x_train).reshape(7000, 16, 1)
d_x_train=np.array(d_x_train).reshape(7000, 16, 1)
e_x_train=np.array(e_x_train).reshape(7000, 16, 1)
c_y_train=np.array(c_y_train).reshape(7000, 1, 1)
d_y_train=np.array(d_y_train).reshape(7000, 1, 1)
e_y_train=np.array(e_y_train).reshape(7000, 1, 1)

model1=keras.Sequential()
model1.add(keras.Input(shape=(16, 1)))
model1.add(keras.layers.LSTM(100))
model1.add(keras.layers.Dense(1, activation="sigmoid"))
model1.compile(loss = 'categorical_crossentropy', optimizer='adam',metrics = ['accuracy'])
print(model1.summary())
model1.fit(c_x_train,c_y_train,batch_size =10, epochs = 5)

model2=keras.Sequential()
model2.add(keras.Input(shape=(16, 1)))
model2.add(keras.layers.LSTM(100))
model2.add(keras.layers.Dense(1, activation="sigmoid"))
model2.compile(loss = 'categorical_crossentropy', optimizer='adam',metrics = ['accuracy'])
print(model2.summary())
model2.fit(d_x_train,d_y_train,batch_size =10, epochs = 5)

model3=keras.Sequential()
model3.add(keras.Input(shape=(16, 1)))
model3.add(keras.layers.LSTM(50))
model3.add(keras.layers.Dense(1, activation="relu"))
model3.compile(loss = 'categorical_crossentropy', optimizer='adam',metrics = ['accuracy'])
print(model3.summary())
model2.fit(e_x_train,e_y_train,batch_size =10, epochs = 5)


# =============================================================================
# test=np.array([x_train[1]])
# 
# print( model.predict(test) )
# =============================================================================
